syntax = "proto3";

package model;

option go_package = "./common/pb";

/* 
    Model didefinisikan menggunakan keyword message diikuti dengan nama model-nya. 
    Di dalam kurung kurawal, ditulis property-property model 
    dengan skema penulisan <tipe data> <nama property> = <numbered field>.
*/

enum UserGender {
    UNDEFINDE = 0;
    MALE = 1;
    FEMALE = 2;
}

/*
    Bisa dilihat bahwa di tiap field terdapat unique number. 
    Informasi ini berguna untuk versioning model protobuf. 
    Tiap field harus memiliki angka yang unik satu sama lain dalam satu "message".
*/

message User {
    string id = 1;
    string name = 2;
    string password = 3;
    UserGender gender = 4;
}

message UserList {
    repeated User list = 1;
}

/*
    Di dalam User, dideklarasikan property "id", "name", dan "password" yang bertipe "string"; dan juga property "gender" yang bertipe "enum UserGender".
    Selain User, model UserList juga didefinisikan. Isinya hanya satu property yaitu list yang tipe-nya adalah User. 
    Keyword repeated pada property digunakan untuk pendefinisian tipe array atau slice. 
    Statement "repeated User" adalah ekuivalen dengan "[]*User" (tipe element slice pasti pointer).
*/


import "google/protobuf/Empty.proto";

service Users {
    rpc Register(User) returns (google.protobuf.Empty) {}
    rpc List(google.protobuf.Empty) returns (UserList) {}
}

/*
Sebuah service bernama Users didefinisikan, dengan isi dua buah method.

    Register(), menerima parameter bertipe model User, dan mengembalikan google.protobuf.Empty.
    List(), menerima parameter bertipe google.protobuf.Empty, dan mengembalikan tipe UserList.

    Pada method Register() sebenarnya kita tidak butuh nilai balik. Tapi karena requirements dari protobuf mewajibkan semua rpc method harus memiliki nilai balik, 
    maka kita gunakan model Empty milik google protobuf.

    Cara penggunaan model Empty adalah dengan meng-import file proto-nya terlebih dahulu, google/protobuf/Empty.proto, lalu menggunakan google.protobuf.Empty sebagai model.

    Juga, pada method List(), sebenarnya argument tidak dibutuhkan, 
    tapi karena protobuf mewajibkan pendefinisian rpc method untuk memiliki satu buah argument dan satu buah return type, maka mau tidak mau harus ada argument.
    
*/

// Setelah di-compile, dua buah interface terbuat dengan skema nama <interfacename>Server dan <interfacename>Client. Karena nama service adalah Users, maka terbuatlah UsersServer dan UsersClient.